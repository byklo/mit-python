TODO:

 - LRU Cache (https://leetcode.com/problems/lru-cache/)

	Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.
	
	get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
	put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.
	
	Follow up:
	Could you do both operations in O(1) time complexity?
	
	Example:
	
	LRUCache cache = new LRUCache( 2 /* capacity */ );
	
	cache.put(1, 1);
	cache.put(2, 2);
	cache.get(1);       // returns 1
	cache.put(3, 3);    // evicts key 2
	cache.get(2);       // returns -1 (not found)
	cache.put(4, 4);    // evicts key 1
	cache.get(1);       // returns -1 (not found)
	cache.get(3);       // returns 3
	cache.get(4);       // returns 4

 - Median of 2 sorted arrays (https://leetcode.com/problems/median-of-two-sorted-arrays/)

	There are two sorted arrays nums1 and nums2 of size m and n respectively.
	
	Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
	
	Example 1:
	nums1 = [1, 3]
	nums2 = [2]
	
	The median is 2.0
	Example 2:
	nums1 = [1, 2]
	nums2 = [3, 4]
	
	The median is (2 + 3)/2 = 2.5

 - Max points on a line (https://leetcode.com/problems/max-points-on-a-line/)

	Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.

 - reverse words in a string (https://leetcode.com/problems/reverse-words-in-a-string/)

	Given an input string, reverse the string word by word.
	
	For example,
	Given s = "the sky is blue",
	return "blue is sky the".
	
	Update (2015-02-12):
	For C programmers: Try to solve it in-place in O(1) space.
	
	Clarification:
	What constitutes a word?
	A sequence of non-space characters constitutes a word.
	Could the input string contain leading or trailing spaces?
	Yes. However, your reversed string should not contain leading or trailing spaces.
	How about multiple spaces between two words?
	Reduce them to a single space in the reversed string.
